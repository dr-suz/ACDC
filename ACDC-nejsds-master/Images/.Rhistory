n_complete = 469
table(gardasil$Race[gardasil$Completed==1])
x_nonW = 105+17+67
ME = 0.1
z_star = qnorm((1-0.95)/2,0,1,lower.tail=TRUE)
p_hat = x_nonW / n_complete
(p_hat*(1-p_hat))/(ME/z_star)^2
ME = 0.1
z_star = qnorm((1-0.95)/2,0,1,lower.tail=TRUE)
(0.5*(1-0.5))/(ME/z_star)^2
t.test(gardasil$Shots, mu=3, alternative="less")
n=1413
TestStat = (mean(gardasil$Shots) - 3)/(sd(gardasil$Shots)/sqrt(n))
pt(TestStat, df=n-1, lower.tail = TRUE)
table(gardasil$MedAssist)
prop.test(1138, n=1413, p=0.5, alternative="less", correct=FALSE)
table(gardasil$MedAssist)
n = 1413
x = 1138
TestStat = ((x/n) - 0.5)/sqrt(.5*.5/n)
pnorm(TestStat, lower.tail=TRUE)
20^2
((136/400)-.28)/sqrt(0.28*(1-0.28)/400)
(.34-.28)/.024
sqrt(.28*(1-.28))
sqrt(.34*(1-.34))
library(readr)
Q3_grades <- read_csv("Downloads/Q3_grades.csv")
View(Q3_grades)
as.number(Q3_grades$grade)
number(Q3_grades$grade)
Q3_grades$grade
grades <- Q3_grades$score/18
hist(grades)
summary(grades)
library(readr)
Q3_grades <- read_csv("Downloads/Q3_grades.csv")
View(Q3_grades)
grades <- Q3_grades$grade
hist(grades)
summary(grades)
GHW1 = 100
GHW2 = 100
GHW3 = 100
GHW4 = 100
GHW5 = 100
IHW = 100
Q1 = 100
Q2 = 100
Q3 = 100
proj = 100
final = 100
(mean(c(GHW1, GHW2, GHW3, GHW4, GHW5))*0.1) +
IHW*0.15 +
(Q1+Q2+Q3)*0.1 +
proj*0.25 +
final*0.2
**Skipped:** Q14, Q15, Q16, Q17, Q27, Q37, Q38, Q39
before = c(33,33,38,33,35,35,40,40,40,31)
after = c(34,28,25,28,35,33,31,28,35,33)
diff = before - after
mean(diff); sd(diff)
library(matrixStats) # For function 'rowMads'
library(snowfall) # For parallelisation
library(parallel) # For parallelisation
library(pbapply) # For function 'pblapply'
library(mcmc)
library(tidyverse)
library(gridExtra)
remove(list=ls())
setwd("~/Documents/GitHub/ACC.Xie")
source('Auxiliary_Functions.R')
source('Auxiliary_Functions.R')
install.packages("ks")
#setwd('/Users/sthornt1/Downloads/core-functions-main')
#setwd('/Users/m/Downloads/W. Li Code/core-functions-main')
source('Auxiliary_Functions.R')
install.packages("spatstat")
source('Divide_Recombine_Parallelise.R')
source('Functions_of_RejABC.R')
source('Functions_of_RegABC.R')
install.packages("glmnet")
source('Functions_of_RegABC.R')
source('Functions_of_ABC_PMC.R')
#setwd("/Users/sthornt1/Downloads/cauchy")
source('Cauchy_example_functionsv2.R')
parameter_true<-c(location=10,scale=0.55)
platform = 'Mac'
tolerance_percentile = 0.005
n = 100
N = 5e4
N_MCMC<-1e5
prior_choice = 'Cauchy'
# generate observed data
#set.seed(404)  #ISSBC_params[[1]], post_samp[[1]]
set.seed(400)
obs_dat = rcauchy(n, parameter_true[1], parameter_true[2])
group_no<-sqrt(n)
subgroup<-divide(obs_dat,group_no)
data_i = 1
prior_df = 1
test_size = 1
ISABC_params = ABC_params = post_samps = MCMC_accept = list()
logposterior_Cauchy<-function(params,obs){
loglik_val<-sum(dcauchy(obs,location=params[1],scale=params[2],log=TRUE))
if(is.na(loglik_val)) loglik_val<--Inf
prior_val<-1/params[2]
if(prior_val>0) logprior_val<-log(prior_val)
if(prior_val<=0) logprior_val<--Inf
return(loglik_val+logprior_val)
}
for(ii in 1:2){ #parameter setting
parameter_setting <- ii
tested_parameters<-matrix(rep(parameter_true,test_size),ncol=2,byrow=T) # a test_size*2 matrix
if(parameter_setting==1) prior_location<-parameter_true[1]
if(parameter_setting==2) prior_location<-parameter_true[1]
prior_scale<-rep(10,length(prior_location))
# Simulate the parameter values and calculate their prior and proposal densities, conditional on the given parameter setting and proposal distribution
if(parameter_setting==1){
param_est<-1
subgroup_medians<-unlist(lapply(subgroup,median)) # a N*1 subgroup_medians
simulated_parameters<-cbind(simulate_from_r2(N,subgroup_medians),tested_parameters[data_i,2])
proposal_densities<-density_r2(simulated_parameters[,1],subgroup_medians)
if(prior_choice=='jeffery') prior_densities<-rep(1,N)
if(prior_choice=='Cauchy') prior_densities<-dt((simulated_parameters[,1]-prior_location)/prior_scale,df=prior_df)
tested_summary <- median(obs_dat)
}
if(parameter_setting==2){
param_est<-1
subgroup_means<-unlist(lapply(subgroup,mean)) # a N*1 vector
simulated_parameters<-cbind(simulate_from_r2(N,subgroup_means),tested_parameters[data_i,2])
proposal_densities<-density_r2(simulated_parameters[,1],subgroup_means)
if(prior_choice=='jeffery') prior_densities<-rep(1,N)
if(prior_choice=='Cauchy') prior_densities<-dt((simulated_parameters[,1]-prior_location)/prior_scale,df=prior_df)
tested_summary <- mean(obs_dat)
}
simulated_observations<-simulate_pseudo_datasets(simulated_parameters,n)
simulated_summaries<-cal_summaries(simulated_observations,setting=parameter_setting,platform=platform)
reference_tables<-list(parameters=simulated_parameters,summaries=simulated_summaries)
weights_of_sample<-prior_densities/proposal_densities
############rej ABC (rejABC)#################
method_i<-1 #
results_rejABC<-rejABC(reference_tables,t(tested_summary),
tolerance_percentile=tolerance_percentile,paral=FALSE,platform=platform)
ABC_params[[ii]]  = results_rejABC$set_1$parameters %>% data.frame
names(ABC_params[[ii]]) = c("theta", "tau")
###########importance sampling regression ABC (ISregABC)###################
method_i<-2 #
results_ISregABC<-regABC(reference_tables,t(tested_summary),
tolerance_percentile=tolerance_percentile,paral=FALSE,platform=platform,
weights_of_sample=weights_of_sample)
ISABC_params_tmp  = results_ISregABC$set_1$parameters %>% data.frame
names(ISABC_params_tmp) = c("theta", "tau")
ISABC_params[[ii]] = ISABC_params_tmp %>% mutate(weights = results_ISregABC$set_1$weights/sum(results_ISregABC$set_1$weights))    ### maybe I need to weight the parameters?
############target posterior #####################
MCMC_results<-metrop(logposterior_Cauchy,initial=parameter_true,scale=diag(c(0.03,0.02)),nbatch=N_MCMC,obs=obs_dat)
MCMC_accept[[ii]]<-MCMC_results$accept
post_samps[[ii]]<-MCMC_results$batch[-(1:1e4),] %>% data.frame
names(post_samps[[ii]]) = c("theta", "tau")
}
p1 <- ggplot() + geom_density(data=ABC_params[[1]],aes(x=theta), kernel='triangular') +
geom_density(data=post_samps[[1]],aes(x=theta), col="gray", kernel='triangular') +
xlim(9,11) + labs(x=expression(theta), y='Density') +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
p2 <- ggplot() +  geom_density(data=abc,aes(x=theta), kernel='triangular') +
geom_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y=' ') +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
grid.arrange(p1,p2,ncol=2)
p1 <- ggplot() + geom_density(data=ABC_params[[1]],aes(x=theta), kernel='triangular') +
geom_density(data=post_samps[[1]],aes(x=theta), col="gray", kernel='triangular') +
xlim(9,11) + labs(x=expression(theta), y='Density') +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
p2 <- ggplot() +  geom_density(data=abc,aes(x=theta), kernel='triangular') +
geom_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y=' ') +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
p2 <- ggplot() +  geom_density(data=abc,aes(x=theta), kernel='triangular') +
geom_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y=' ') +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
##save.image('ABC-median.Rdata')
#load('ABC-median.Rdata')
#save.image('ABC-mean.Rdata')
#load('ABC-mean.Rdata')
abc <- ABC_params[[2]]
post <- post_samps[[2]]
## try using stat_density and different kernel than gaussian
###################################################
#dev.off()
p1 <- ggplot() + geom_density(data=ABC_params[[1]],aes(x=theta), kernel='triangular') +
geom_density(data=post_samps[[1]],aes(x=theta), col="gray", kernel='triangular') +
xlim(9,11) + labs(x=expression(theta), y='Density') +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
p2 <- ggplot() +  geom_density(data=abc,aes(x=theta), kernel='triangular') +
geom_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y=' ') +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
#pdf(paste0("Cauchy_ABC_fig_n",n, ".pdf"))
grid.arrange(p1,p2,ncol=2)
## try using stat_density and different kernel than gaussian
###################################################
#dev.off()
p1 <- ggplot() + geom_density(data=ABC_params[[1]],aes(x=theta), kernel='triangular') +
geom_density(data=post_samps[[1]],aes(x=theta), col="gray", kernel='triangular') +
xlim(9,11) + labs(x=expression(theta), y='Density') +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank()) + theme_classic()
p2 <- ggplot() +  geom_density(data=abc,aes(x=theta), kernel='triangular') +
geom_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y=' ') +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank()) + theme_classic()
#pdf(paste0("Cauchy_ABC_fig_n",n, ".pdf"))
grid.arrange(p1,p2,ncol=2)
## try using stat_density and different kernel than gaussian
###################################################
#dev.off()
p1 <- ggplot() + geom_density(data=ABC_params[[1]],aes(x=theta), kernel='triangular') +
geom_density(data=post_samps[[1]],aes(x=theta), col="gray", kernel='triangular') +
xlim(9,11) + labs(x=expression(theta), y='Density') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
p2 <- ggplot() +  geom_density(data=abc,aes(x=theta), kernel='triangular') +
geom_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y=' ') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
#pdf(paste0("Cauchy_ABC_fig_n",n, ".pdf"))
grid.arrange(p1,p2,ncol=2)
?geom_density
## try using stat_density and different kernel than gaussian
###################################################
#dev.off()
p1 <- ggplot() + geom_density(data=ABC_params[[1]],aes(x=theta), kernel='triangular') +
#geom_density(data=post_samps[[1]],aes(x=theta), col="gray", kernel='triangular') +
stat_density(data=post_samps[[1]],aes(x=theta), col="gray", kernel='triangular') +
xlim(9,11) + labs(x=expression(theta), y='Density') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
p2 <- ggplot() +  geom_density(data=abc,aes(x=theta), kernel='triangular') +
#geom_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
stat_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y=' ') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
#pdf(paste0("Cauchy_ABC_fig_n",n, ".pdf"))
grid.arrange(p1,p2,ncol=2)
## try using stat_density and different kernel than gaussian
###################################################
#dev.off()
p1 <- ggplot() + geom_density(data=ABC_params[[1]],aes(x=theta), kernel='triangular') +
geom_density(data=post_samps[[1]],aes(x=theta), col="gray",
adjust = 1/8, kernel='triangular') +
#stat_density(data=post_samps[[1]],aes(x=theta), col="gray", kernel='triangular') +
xlim(9,11) + labs(x=expression(theta), y='Density') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
p2 <- ggplot() +  geom_density(data=abc,aes(x=theta), kernel='triangular') +
geom_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
#stat_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y=' ') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
#pdf(paste0("Cauchy_ABC_fig_n",n, ".pdf"))
grid.arrange(p1,p2,ncol=2)
## try using stat_density and different kernel than gaussian
###################################################
#dev.off()
p1 <- ggplot() +
geom_density(data=ABC_params[[1]],aes(x=theta),  adjust = 1/8, kernel='triangular') +
geom_density(data=post_samps[[1]],aes(x=theta), col="gray", kernel='triangular') +
#stat_density(data=post_samps[[1]],aes(x=theta), col="gray", kernel='triangular') +
xlim(9,11) + labs(x=expression(theta), y='Density') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
p2 <- ggplot() +  geom_density(data=abc,aes(x=theta), kernel='triangular') +
geom_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
#stat_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y=' ') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
#pdf(paste0("Cauchy_ABC_fig_n",n, ".pdf"))
grid.arrange(p1,p2,ncol=2)
## try using stat_density and different kernel than gaussian
###################################################
#dev.off()
p1 <- ggplot() +
geom_density(data=ABC_params[[1]],aes(x=theta),  adjust = 1/2, kernel='triangular') +
geom_density(data=post_samps[[1]],aes(x=theta), col="gray", kernel='triangular') +
#stat_density(data=post_samps[[1]],aes(x=theta), col="gray", kernel='triangular') +
xlim(9,11) + labs(x=expression(theta), y='Density') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
p2 <- ggplot() +  geom_density(data=abc,aes(x=theta), kernel='triangular') +
geom_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
#stat_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y=' ') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
#pdf(paste0("Cauchy_ABC_fig_n",n, ".pdf"))
grid.arrange(p1,p2,ncol=2)
## try using stat_density and different kernel than gaussian
###################################################
#dev.off()
p1 <- ggplot() +
geom_density(data=ABC_params[[1]],aes(x=theta),  adjust = 3/2, kernel='triangular') +
geom_density(data=post_samps[[1]],aes(x=theta), col="gray", kernel='triangular') +
#stat_density(data=post_samps[[1]],aes(x=theta), col="gray", kernel='triangular') +
xlim(9,11) + labs(x=expression(theta), y='Density') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
p2 <- ggplot() +  geom_density(data=abc,aes(x=theta), kernel='triangular') +
geom_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
#stat_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y=' ') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
#pdf(paste0("Cauchy_ABC_fig_n",n, ".pdf"))
grid.arrange(p1,p2,ncol=2)
## try using stat_density and different kernel than gaussian
###################################################
#dev.off()
p1 <- ggplot() +
geom_density(data=ABC_params[[1]],aes(x=theta),  adjust = 3/2, kernel='triangular') +
geom_density(data=post_samps[[1]],aes(x=theta), col="gray", kernel='triangular') +
#stat_density(data=post_samps[[1]],aes(x=theta), col="gray", kernel='triangular') +
xlim(9,11) + labs(x=expression(theta), y='Density') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
p2 <- ggplot() +
geom_density(data=abc,aes(x=theta), adjust = 3/2, kernel='triangular') +
geom_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
#stat_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y=' ') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
#pdf(paste0("Cauchy_ABC_fig_n",n, ".pdf"))
grid.arrange(p1,p2,ncol=2)
## try using stat_density and different kernel than gaussian
###################################################
#dev.off()
p1 <- ggplot() +
geom_density(data=ABC_params[[1]],aes(x=theta),  adjust = 1.2, kernel='triangular') +
geom_density(data=post_samps[[1]],aes(x=theta), col="gray", kernel='triangular') +
#stat_density(data=post_samps[[1]],aes(x=theta), col="gray", kernel='triangular') +
xlim(9,11) + labs(x=expression(theta), y='Density') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
p2 <- ggplot() +
geom_density(data=abc,aes(x=theta), adjust = 3/2, kernel='triangular') +
geom_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
#stat_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y=' ') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
#pdf(paste0("Cauchy_ABC_fig_n",n, ".pdf"))
grid.arrange(p1,p2,ncol=2)
## try using stat_density and different kernel than gaussian
###################################################
#dev.off()
p1 <- ggplot() +
geom_density(data=ABC_params[[1]],aes(x=theta),  adjust = 1.2, kernel='triangular') +
geom_density(data=post_samps[[1]],aes(x=theta), col="gray", kernel='triangular') +
#stat_density(data=post_samps[[1]],aes(x=theta), col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y='Density') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
p2 <- ggplot() +
geom_density(data=abc,aes(x=theta), adjust = 3/2, kernel='triangular') +
geom_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
#stat_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y=' ') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
#pdf(paste0("Cauchy_ABC_fig_n",n, ".pdf"))
grid.arrange(p1,p2,ncol=2)
## try using stat_density and different kernel than gaussian
###################################################
#dev.off()
p1 <- ggplot() +
geom_density(data=ABC_params[[1]],aes(x=theta), kernel='triangular') +
geom_density(data=post_samps[[1]],aes(x=theta), col="gray", kernel='triangular') +
#stat_density(data=post_samps[[1]],aes(x=theta), col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y='Density') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
p2 <- ggplot() +
geom_density(data=abc,aes(x=theta), adjust = 3/2, kernel='triangular') +
geom_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
#stat_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y=' ') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
#pdf(paste0("Cauchy_ABC_fig_n",n, ".pdf"))
grid.arrange(p1,p2,ncol=2)
## try using stat_density and different kernel than gaussian
###################################################
#dev.off()
p1 <- ggplot() +
geom_density(data=ABC_params[[1]],aes(x=theta)) +
geom_density(data=post_samps[[1]],aes(x=theta), col="gray", kernel='triangular') +
#stat_density(data=post_samps[[1]],aes(x=theta), col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y='Density') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
p2 <- ggplot() +
geom_density(data=abc,aes(x=theta), adjust = 3/2, kernel='triangular') +
geom_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
#stat_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y=' ') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
#pdf(paste0("Cauchy_ABC_fig_n",n, ".pdf"))
grid.arrange(p1,p2,ncol=2)
#remove(list=setdiff(ls(),c('abc', 'post')))
###################################################
#dev.off()
p1 <- ggplot() + geom_density(data=ABC_params[[1]],aes(x=theta)) +
geom_density(data=post_samps[[1]],aes(x=theta), col="gray") +
xlim(9,11) + labs(x=expression(theta), y='Density') +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
p2 <- ggplot() +  geom_density(data=ABC_params[[2]],aes(x=theta)) +
geom_density(data=post_samps[[2]],aes(x=theta), col="gray") +
xlim(5,12) + labs(x=expression(theta), y=' ') +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
grid.arrange(p1,p2,ncol=2)
names(ABC_params[[1]])
names(post_samps[[1]])
## try using stat_density and different kernel than gaussian
###################################################
#dev.off()
p1 <- ggplot() +
geom_density(data=ABC_params[[1]],aes(x=theta), kernel='triangular') +
geom_density(data=post_samps[[1]],aes(x=theta), col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y='Density') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
p2 <- ggplot() +
#geom_density(data=abc,aes(x=theta), adjust = 3/2, kernel='triangular') +
geom_density(data=ABC_params[[2]],aes(x=theta), adjust = 3/2, kernel='triangular') +
#geom_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
geom_density(data=post_samps[[2]],aes(x=theta), col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y=' ') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
#pdf(paste0("Cauchy_ABC_fig_n",n, ".pdf"))
grid.arrange(p1,p2,ncol=2)
## try using stat_density and different kernel than gaussian
###################################################
#dev.off()
p1 <- ggplot() +
geom_density(data=ABC_params[[1]],aes(x=theta), adjust=1/2, kernel='triangular') +
geom_density(data=post_samps[[1]],aes(x=theta), col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y='Density') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
p2 <- ggplot() +
#geom_density(data=abc,aes(x=theta), adjust = 3/2, kernel='triangular') +
geom_density(data=ABC_params[[2]],aes(x=theta), adjust = 3/2, kernel='triangular') +
#geom_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
geom_density(data=post_samps[[2]],aes(x=theta), col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y=' ') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
#pdf(paste0("Cauchy_ABC_fig_n",n, ".pdf"))
grid.arrange(p1,p2,ncol=2)
## try using stat_density and different kernel than gaussian
###################################################
#dev.off()
p1 <- ggplot() +
geom_density(data=ABC_params[[1]],aes(x=theta), adjust=6/2, kernel='triangular') +
geom_density(data=post_samps[[1]],aes(x=theta), col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y='Density') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
p2 <- ggplot() +
#geom_density(data=abc,aes(x=theta), adjust = 3/2, kernel='triangular') +
geom_density(data=ABC_params[[2]],aes(x=theta), adjust = 3/2, kernel='triangular') +
#geom_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
geom_density(data=post_samps[[2]],aes(x=theta), col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y=' ') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
#pdf(paste0("Cauchy_ABC_fig_n",n, ".pdf"))
grid.arrange(p1,p2,ncol=2)
## try using stat_density and different kernel than gaussian
###################################################
#dev.off()
p1 <- ggplot() +
geom_density(data=ABC_params[[1]],aes(x=theta), adjust=5, kernel='triangular') +
geom_density(data=post_samps[[1]],aes(x=theta), col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y='Density') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
p2 <- ggplot() +
#geom_density(data=abc,aes(x=theta), adjust = 3/2, kernel='triangular') +
geom_density(data=ABC_params[[2]],aes(x=theta), adjust = 3/2, kernel='triangular') +
#geom_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
geom_density(data=post_samps[[2]],aes(x=theta), col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y=' ') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
#pdf(paste0("Cauchy_ABC_fig_n",n, ".pdf"))
grid.arrange(p1,p2,ncol=2)
## try using stat_density and different kernel than gaussian
###################################################
#dev.off()
p1 <- ggplot() +
geom_density(data=ABC_params[[1]],aes(x=theta), adjust=5, kernel='triangular') +
geom_density(data=post_samps[[1]],aes(x=theta), adjust=5, col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y='Density') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
p2 <- ggplot() +
#geom_density(data=abc,aes(x=theta), adjust = 3/2, kernel='triangular') +
geom_density(data=ABC_params[[2]],aes(x=theta), adjust = 3/2, kernel='triangular') +
#geom_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
geom_density(data=post_samps[[2]],aes(x=theta), col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y=' ') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
#pdf(paste0("Cauchy_ABC_fig_n",n, ".pdf"))
grid.arrange(p1,p2,ncol=2)
## try using stat_density and different kernel than gaussian
###################################################
#dev.off()
p1 <- ggplot() +
geom_density(data=ABC_params[[1]],aes(x=theta), adjust=5, kernel='triangular') +
geom_density(data=post_samps[[1]],aes(x=theta), adjust=5, col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y='Density') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
p2 <- ggplot() +
#geom_density(data=abc,aes(x=theta), adjust = 3/2, kernel='triangular') +
geom_density(data=ABC_params[[2]],aes(x=theta), adjust = 3/2, kernel='triangular') +
#geom_density(data=post,aes(x=theta), col="gray", kernel='triangular') +
geom_density(data=post_samps[[2]],aes(x=theta), adjust=3/2, col="gray", kernel='triangular') +
xlim(8,12) + labs(x=expression(theta), y=' ') + theme_classic() +
theme(axis.text.y = element_blank(),axis.ticks.y = element_blank())
#pdf(paste0("Cauchy_ABC_fig_n",n, ".pdf"))
grid.arrange(p1,p2,ncol=2)
getwd()
setwd("~/Documents/GitHub/ACDC/ACDC-nejsds-master/Images")
png(paste0("Cauchy_ABC_fig_n",n, ".png"))
grid.arrange(p1,p2,ncol=2)
dev.off()
